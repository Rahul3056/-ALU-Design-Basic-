#### **Example Verilog Code**  
```verilog
// 4-bit ALU Module
module alu_4bit (
    input wire [3:0] A, B,
    input wire [2:0] opcode,
    output reg [3:0] result
);
    always @(*) begin
        case (opcode)
            3'b000: result = A + B;   // Addition
            3'b001: result = A - B;   // Subtraction
            3'b010: result = A & B;   // AND
            3'b011: result = A | B;   // OR
            3'b100: result = A ^ B;   // XOR
            default: result = 4'b0000; // Default case
        endcase
    end
endmodule
```

#### **Testbench Code**  
```verilog
// Testbench for 4-bit ALU
module testbench;
    reg [3:0] A, B;
    reg [2:0] opcode;
    wire [3:0] result;

    // Instantiate ALU
    alu_4bit uut (.A(A), .B(B), .opcode(opcode), .result(result));

    initial begin
        $monitor("A=%b, B=%b, Opcode=%b, Result=%b", A, B, opcode, result);
        
        A = 4'b0010; B = 4'b0001; opcode = 3'b000; #10; // Addition
        A = 4'b0010; B = 4'b0001; opcode = 3'b001; #10; // Subtraction
        A = 4'b1010; B = 4'b1100; opcode = 3'b010; #10; // AND
        A = 4'b1010; B = 4'b1100; opcode = 3'b011; #10; // OR
        A = 4'b1010; B = 4'b1100; opcode = 3'b100; #10; // XOR

        $finish;
    end
endmodule
```
